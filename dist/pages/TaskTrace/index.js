'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var app = getApp();
var network = require('../../util/network.js');
var $ = require('../../util/ajax.js');

exports.default = Page({
  data: {

    TaskTrace: [],
    PostURL: app.globalData.BPMHost + "/Login.ashx",
    GetURL: app.globalData.BPMHost + "/TaskTrace.ashx",
    Postdata: { tid: "701461", pwd: "Joson080256", UserAccount: "SDT12872", isDebug: true, isWeixIn: true },

    steps: [{
      title: '步骤1',
      desc: '开始'
    }, {
      title: '步骤2',
      desc: '进入详情页'
    }, {
      title: '步骤3',
      desc: '结束'
    }],
    current: 1
  },

  onShow: function onShow(options) {},
  onLoad: function onLoad(option) {

    var TaskID = option.TaskID;
    var that = this;
    var Josonoptions = that.data;

    that.setData(_defineProperty({}, "Postdata.tid", TaskID));

    that.AjaxPost(Josonoptions);
  },


  AjaxPost: function AjaxPost(options) {

    var that = this;

    $.ajax({
      method: 'POST',
      url: options.PostURL,
      data: options.Postdata

    }).then(function (response) {

      //console.log(response);

      $.ajax({
        method: 'GET',
        url: options.GetURL,
        data: options.Postdata

      }).then(function (Performance) {
        console.log(Performance);
        Performance.children.forEach(function (value, i) {
          var stepItem = {};
          stepItem = {
            title: value["Recipient"] + " " + value["FinishAt"], //+ ""+ value["SelActionDisplayString"],
            desc: value["StepDisplayName"]
          };
          that.data.TaskTrace.push(stepItem);
          that.data.current = value["Finished"] ? i : i - 1;
        });

        //console.log(that.data.TaskTrace);

        that.setData({
          //navigationBarTitleText: data.TaskName + data.TaskCode,
          TaskName: Performance.pn,
          TaskCode: Performance.sn,
          steps: that.data.TaskTrace,
          current: that.data.current
        });
      });

      console.log(that.data);

      //app.globalData.userInfo = options.userInfo;
    });
  },

  methods: {}
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4Lnd4cCJdLCJuYW1lcyI6WyJhcHAiLCJnZXRBcHAiLCJuZXR3b3JrIiwicmVxdWlyZSIsIiQiLCJkYXRhIiwiVGFza1RyYWNlIiwiUG9zdFVSTCIsImdsb2JhbERhdGEiLCJCUE1Ib3N0IiwiR2V0VVJMIiwiUG9zdGRhdGEiLCJ0aWQiLCJwd2QiLCJVc2VyQWNjb3VudCIsImlzRGVidWciLCJpc1dlaXhJbiIsInN0ZXBzIiwidGl0bGUiLCJkZXNjIiwiY3VycmVudCIsIm9uU2hvdyIsIm9wdGlvbnMiLCJvbkxvYWQiLCJvcHRpb24iLCJUYXNrSUQiLCJ0aGF0IiwiSm9zb25vcHRpb25zIiwic2V0RGF0YSIsIkFqYXhQb3N0IiwiYWpheCIsIm1ldGhvZCIsInVybCIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwiUGVyZm9ybWFuY2UiLCJjaGlsZHJlbiIsImZvckVhY2giLCJ2YWx1ZSIsImkiLCJzdGVwSXRlbSIsInB1c2giLCJUYXNrTmFtZSIsInBuIiwiVGFza0NvZGUiLCJzbiIsIm1ldGhvZHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBSUEsTUFBTUMsUUFBVjtBQUNFLElBQUlDLFVBQVVDLFFBQVEsdUJBQVIsQ0FBZDtBQUNBLElBQUlDLElBQUlELFFBQVEsb0JBQVIsQ0FBUjs7O0FBZUVFLFFBQU07O0FBRUpDLGVBQVcsRUFGUDtBQUdKQyxhQUFTUCxJQUFJUSxVQUFKLENBQWVDLE9BQWYsR0FBeUIsYUFIOUI7QUFJSkMsWUFBUVYsSUFBSVEsVUFBSixDQUFlQyxPQUFmLEdBQXlCLGlCQUo3QjtBQUtKRSxjQUFVLEVBQUNDLEtBQUssUUFBTixFQUFnQkMsS0FBSyxhQUFyQixFQUFvQ0MsYUFBYSxVQUFqRCxFQUE2REMsU0FBUyxJQUF0RSxFQUE0RUMsVUFBVSxJQUF0RixFQUxOOztBQU9KQyxXQUFPLENBQUM7QUFDTkMsYUFBTyxLQUREO0FBRU5DLFlBQU07QUFGQSxLQUFELEVBR0o7QUFDREQsYUFBTyxLQUROO0FBRURDLFlBQU07QUFGTCxLQUhJLEVBTUo7QUFDREQsYUFBTyxLQUROO0FBRURDLFlBQU07QUFGTCxLQU5JLENBUEg7QUFpQkpDLGFBQVM7QUFqQkwsRzs7QUFvQk5DLFEsa0JBQU9DLE8sRUFBUyxDQUdmLEM7QUFFREMsUSxrQkFBT0MsTSxFQUFROztBQUViLFFBQUlDLFNBQU9ELE9BQU9DLE1BQWxCO0FBQ0EsUUFBSUMsT0FBTyxJQUFYO0FBQ0EsUUFBSUMsZUFBZUQsS0FBS3JCLElBQXhCOztBQUdBcUIsU0FBS0UsT0FBTCxxQkFDRyxjQURILEVBQ21CSCxNQURuQjs7QUFJQUMsU0FBS0csUUFBTCxDQUFjRixZQUFkO0FBRUQsRzs7O0FBRURFLFlBQVUsa0JBQVVQLE9BQVYsRUFBbUI7O0FBRTNCLFFBQUlJLE9BQU8sSUFBWDs7QUFFQXRCLE1BQUUwQixJQUFGLENBQU87QUFDTEMsY0FBUSxNQURIO0FBRUxDLFdBQUtWLFFBQVFmLE9BRlI7QUFHTEYsWUFBTWlCLFFBQVFYOztBQUhULEtBQVAsRUFLR3NCLElBTEgsQ0FLUSxvQkFBWTs7QUFFbEI7O0FBRUE3QixRQUFFMEIsSUFBRixDQUFPO0FBQ0xDLGdCQUFRLEtBREg7QUFFTEMsYUFBS1YsUUFBUVosTUFGUjtBQUdMTCxjQUFNaUIsUUFBUVg7O0FBSFQsT0FBUCxFQUtHc0IsSUFMSCxDQUtRLHVCQUFlO0FBQ3JCQyxnQkFBUUMsR0FBUixDQUFZQyxXQUFaO0FBQ0FBLG9CQUFZQyxRQUFaLENBQXFCQyxPQUFyQixDQUE2QixVQUFVQyxLQUFWLEVBQWlCQyxDQUFqQixFQUFvQjtBQUMvQyxjQUFJQyxXQUFXLEVBQWY7QUFDQUEscUJBQVc7QUFDVHZCLG1CQUFRcUIsTUFBTSxXQUFOLElBQXNCLEdBQXRCLEdBQTJCQSxNQUFNLFVBQU4sQ0FEMUIsRUFDNkM7QUFDdERwQixrQkFBUW9CLE1BQU0saUJBQU47QUFGQyxXQUFYO0FBSUFiLGVBQUtyQixJQUFMLENBQVVDLFNBQVYsQ0FBb0JvQyxJQUFwQixDQUF5QkQsUUFBekI7QUFDQWYsZUFBS3JCLElBQUwsQ0FBVWUsT0FBVixHQUFvQm1CLE1BQU0sVUFBTixJQUFxQkMsQ0FBckIsR0FBeUJBLElBQUksQ0FBakQ7QUFDRCxTQVJEOztBQVVBOztBQUVBZCxhQUFLRSxPQUFMLENBQWE7QUFDWDtBQUNBZSxvQkFBVVAsWUFBWVEsRUFGWDtBQUdYQyxvQkFBVVQsWUFBWVUsRUFIWDtBQUlYN0IsaUJBQU9TLEtBQUtyQixJQUFMLENBQVVDLFNBSk47QUFLWGMsbUJBQVNNLEtBQUtyQixJQUFMLENBQVVlO0FBTFIsU0FBYjtBQVFELE9BM0JEOztBQTZCQWMsY0FBUUMsR0FBUixDQUFZVCxLQUFLckIsSUFBakI7O0FBRUE7QUFFRCxLQTFDRDtBQTRDRCxHOztBQUVEMEMsV0FBUyIsImZpbGUiOiJpbmRleC53eHAiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gZ2V0QXBwKCk7XG4gIHZhciBuZXR3b3JrID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9uZXR3b3JrLmpzJyk7XG4gIHZhciAkID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9hamF4LmpzJyk7XG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgY29uZmlnOiB7XG4gICAgICBlbmFibGVQdWxsRG93blJlZnJlc2g6ZmFsc2UsXG4gICAgICBuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0OiBcIlRhc2tUcmFjZVwiLFxuICAgICAgbmF2aWdhdGlvbkJhckJhY2tncm91bmRDb2xvcjogXCIjRkZGRkZGXCIsXG4gICAgICBuYXZpZ2F0aW9uQmFyVGV4dFN0eWxlOiBcImJsYWNrXCIsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2ZmZmVlZVwiLFxuICAgICAgYmFja2dyb3VuZFRleHRTdHlsZTogXCJsaWdodFwiLFxuICAgICAgdXNpbmdDb21wb25lbnRzOiB7XG4gICAgICAgICd3eGMtc3RlcHMnOiAnQG1pbnVpL3d4Yy1zdGVwcydcbiAgICAgIH1cbiAgICB9LFxuICAgIGRhdGE6IHtcblxuICAgICAgVGFza1RyYWNlOiBbXSxcbiAgICAgIFBvc3RVUkw6IGFwcC5nbG9iYWxEYXRhLkJQTUhvc3QgKyBcIi9Mb2dpbi5hc2h4XCIsXG4gICAgICBHZXRVUkw6IGFwcC5nbG9iYWxEYXRhLkJQTUhvc3QgKyBcIi9UYXNrVHJhY2UuYXNoeFwiLFxuICAgICAgUG9zdGRhdGE6IHt0aWQ6IFwiNzAxNDYxXCIsIHB3ZDogXCJKb3NvbjA4MDI1NlwiLCBVc2VyQWNjb3VudDogXCJTRFQxMjg3MlwiLCBpc0RlYnVnOiB0cnVlLCBpc1dlaXhJbjogdHJ1ZX0sXG5cbiAgICAgIHN0ZXBzOiBbe1xuICAgICAgICB0aXRsZTogJ+atpemqpDEnLFxuICAgICAgICBkZXNjOiAn5byA5aeLJ1xuICAgICAgfSwge1xuICAgICAgICB0aXRsZTogJ+atpemqpDInLFxuICAgICAgICBkZXNjOiAn6L+b5YWl6K+m5oOF6aG1J1xuICAgICAgfSwge1xuICAgICAgICB0aXRsZTogJ+atpemqpDMnLFxuICAgICAgICBkZXNjOiAn57uT5p2fJ1xuICAgICAgfV0sXG4gICAgICBjdXJyZW50OiAxXG4gICAgfSxcblxuICAgIG9uU2hvdyhvcHRpb25zKSB7XG5cblxuICAgIH0sXG5cbiAgICBvbkxvYWQob3B0aW9uKSB7XG5cbiAgICAgIGxldCBUYXNrSUQ9b3B0aW9uLlRhc2tJRDtcbiAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgIGxldCBKb3Nvbm9wdGlvbnMgPSB0aGF0LmRhdGE7XG5cblxuICAgICAgdGhhdC5zZXREYXRhKHtcbiAgICAgICAgW1wiUG9zdGRhdGEudGlkXCJdOlRhc2tJRCxcbiAgICAgIH0pO1xuXG4gICAgICB0aGF0LkFqYXhQb3N0KEpvc29ub3B0aW9ucyk7XG5cbiAgICB9LFxuXG4gICAgQWpheFBvc3Q6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICAgIGxldCB0aGF0ID0gdGhpcztcblxuICAgICAgJC5hamF4KHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHVybDogb3B0aW9ucy5Qb3N0VVJMLFxuICAgICAgICBkYXRhOiBvcHRpb25zLlBvc3RkYXRhLFxuXG4gICAgICB9KS50aGVuKHJlc3BvbnNlID0+IHtcblxuICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3BvbnNlKTtcblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgdXJsOiBvcHRpb25zLkdldFVSTCxcbiAgICAgICAgICBkYXRhOiBvcHRpb25zLlBvc3RkYXRhLFxuXG4gICAgICAgIH0pLnRoZW4oUGVyZm9ybWFuY2UgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFBlcmZvcm1hbmNlKTtcbiAgICAgICAgICBQZXJmb3JtYW5jZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgICAgICAgbGV0IHN0ZXBJdGVtID0ge307XG4gICAgICAgICAgICBzdGVwSXRlbSA9IHtcbiAgICAgICAgICAgICAgdGl0bGU6ICB2YWx1ZVtcIlJlY2lwaWVudFwiXSAgKyBcIiBcIisgdmFsdWVbXCJGaW5pc2hBdFwiXSwgLy8rIFwiXCIrIHZhbHVlW1wiU2VsQWN0aW9uRGlzcGxheVN0cmluZ1wiXSxcbiAgICAgICAgICAgICAgZGVzYzogICB2YWx1ZVtcIlN0ZXBEaXNwbGF5TmFtZVwiXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoYXQuZGF0YS5UYXNrVHJhY2UucHVzaChzdGVwSXRlbSk7XG4gICAgICAgICAgICB0aGF0LmRhdGEuY3VycmVudCA9IHZhbHVlW1wiRmluaXNoZWRcIl0gID8gaSA6IGkgLSAxXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvL2NvbnNvbGUubG9nKHRoYXQuZGF0YS5UYXNrVHJhY2UpO1xuXG4gICAgICAgICAgdGhhdC5zZXREYXRhKHtcbiAgICAgICAgICAgIC8vbmF2aWdhdGlvbkJhclRpdGxlVGV4dDogZGF0YS5UYXNrTmFtZSArIGRhdGEuVGFza0NvZGUsXG4gICAgICAgICAgICBUYXNrTmFtZTogUGVyZm9ybWFuY2UucG4sXG4gICAgICAgICAgICBUYXNrQ29kZTogUGVyZm9ybWFuY2Uuc24sXG4gICAgICAgICAgICBzdGVwczogdGhhdC5kYXRhLlRhc2tUcmFjZSxcbiAgICAgICAgICAgIGN1cnJlbnQ6IHRoYXQuZGF0YS5jdXJyZW50XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2codGhhdC5kYXRhKTtcblxuICAgICAgICAvL2FwcC5nbG9iYWxEYXRhLnVzZXJJbmZvID0gb3B0aW9ucy51c2VySW5mbztcblxuICAgICAgfSlcblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7fVxuICB9Il19