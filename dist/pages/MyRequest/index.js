'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var pageIndexs = 1;
var PageSizes = 10;
var app = getApp();
var network = require('../../util/network.js');
var $ = require('../../util/ajax.js');

var JOSON = require('../../util/json2.js');

var thisutil = require('../../util/util.js');
thisutil.StartPullDownRefreh(undefined, app);
var Item = [];

exports.default = Page({
  data: {
    check: true,
    loadmore: false,
    LstItem: [],
    PostURL: app.globalData.BPMHost + "/Login.ashx",
    GetURL: app.globalData.BPMHost + "/MyRequests.ashx",
    Postdata: {
      uid: "SDT12872",
      pwd: "Joson080256",
      UserAccount: "SDT12872",
      start: pageIndexs,
      limit: PageSizes,
      isDebug: true,
      isWeixIn: true
    },
    page: {
      iCount: 0,
      PageIndex: pageIndexs,
      PageSize: PageSizes
    }
  },
  onShow: function onShow(options) {},
  onLoad: function onLoad(option) {

    var that = this;
    var Josonoptions = that.data;
    that.AjaxPost(Josonoptions);
  },

  AjaxPost: function AjaxPost(options) {

    var that = this;

    $.ajax({
      method: 'POST',
      url: options.PostURL,
      data: options.Postdata

    }).then(function (response) {

      //console.log(response);

      $.ajax({
        method: 'GET',
        url: options.GetURL,
        data: options.Postdata

      }).then(function (Performance) {
        var _that$setData;

        var iCounts = Performance.total;
        var PageStart = that.data.page.PageStart;
        var PageEnd = that.data.page.PageEnd;

        console.log(Performance);

        Performance.children.forEach(function (children, index, arrys) {
          Item.push(children);
        });

        //console.log(Item);

        that.setData((_that$setData = {}, _defineProperty(_that$setData, "page.iCount", iCounts), _defineProperty(_that$setData, 'LstItem', Performance.children), _that$setData));
      });

      console.log(that.data);
    });
  },

  onClick: function onClick(e) {

    console.log(e);

    var currentTarget = e.currentTarget.dataset.name;

    var TaskID = currentTarget.tid;
    var StepID = currentTarget.pid;

    //关闭当前页面，跳转到应用内的某个页面
    //      wx.redirectTo({
    //        url: '../TaskInfo/index?TaskID='+TaskID+'&StepID='+StepID+''
    //      });

    //保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原页面
    wx.navigateTo({
      url: '../TaskInfo/index?TaskID=' + TaskID + '&StepID=' + StepID + ''
    });
  },
  onPullDownRefresh: function onPullDownRefresh() {

    var CurrentPageIndexs = 1;

    var that = this;
    var iCounts = that.data.page.iCount;
    var PageStarts = that.data.page.PageStart;
    var PageEnds = that.data.page.PageEnd;
    var PageEndloadmore = false;

    if (iCounts > PageStarts) {
      CurrentPageIndexs = pageIndexs <= 1 ? pageIndexs : pageIndexs--;

      //if( pageIndexs > 1)  pageIndexs--;

      var pageIndex = pageIndexs;
      var PageSize = that.data.page.PageSize;
      var PageStart = pageIndex <= 1 ? 1 : pageIndex * PageSize;
      var PageEnd = pageIndex <= 1 ? PageSize : (pageIndex + 1) * PageSize;

      that.setData({

        page: {
          PageSize: PageSize,
          pageIndex: pageIndex,
          PageStart: PageStart,
          PageEnd: PageEnd
        },

        Postdata: {

          uid: "SDT12872",
          pwd: "Joson080256",
          UserAccount: "SDT12872",
          start: PageStart,
          limit: PageSize
        }

      });

      console.log("下拉翻页，翻页到" + pageIndexs + "页");

      //动态设置当前页面的标题。
      wx.setNavigationBarTitle({
        title: '当前' + CurrentPageIndexs + "页的标题"
      });
    } else {

      PageEndloadmore = true;
      console.log("下拉翻页第一页了 这是第" + pageIndexs + "页");
    }

    console.log("刷新 pageIndexs:" + pageIndexs + "页");

    wx.showNavigationBarLoading(); //在当前页面显示导航条加载动画。

    //console.log(that.data);

    that.AjaxPost(that.data);

    console.log("重新加载信息完成");

    //wx.startPullDownRefresh();
    wx.stopPullDownRefresh(function (success) {}, function (fail) {}, function (complete) {}); //停止当前页面下拉刷新。

    wx.hideNavigationBarLoading(); //隐藏导航条加载动画。


    console.log("关闭 停止当前页面下拉刷新");
  },
  onReachBottom: function onReachBottom() {
    var _that$setData2;

    var that = this;
    var PageIndex = pageIndexs; //that.data.page.pageIndex+1;
    var PageSize = PageSizes; // that.data.page.PageSize;
    var PageStart = PageIndex * PageSize;
    var PageEnd = (PageIndex + 1) * PageSize;

    var PageStartX = "page.PageStart";
    var PageEndX = "page.PageEnd";

    that.setData((_that$setData2 = {}, _defineProperty(_that$setData2, "page.PageSize", PageSize), _defineProperty(_that$setData2, "page.PageIndex", PageIndex), _defineProperty(_that$setData2, PageStartX, PageStart), _defineProperty(_that$setData2, PageEndX, PageEnd), _defineProperty(_that$setData2, 'Postdata', {

      uid: "SDT12872",
      pwd: "Joson080256",
      UserAccount: "SDT12872",
      start: PageStart,
      limit: PageSize
    }), _that$setData2));

    //    console.log(PageSize);
    //    console.log(PageIndex);
    //    console.log(PageSizes);
    //    console.log(pageIndexs);


    this.AjaxPost(that.data);

    var iCounts = that.data.page.iCount;
    var PageStarts = that.data.page.PageStart;
    var PageEnds = that.data.page.PageEnd;
    var PageEndloadmore = false;
    var ShowPageIndex = 1;

    if (iCounts > PageStarts && iCounts >= PageEnds) {

      pageIndexs++;
      ShowPageIndex = pageIndexs;

      console.log("页面上拉翻页，翻页到" + pageIndexs + "页");
    } else {

      PageEndloadmore = true;
      ShowPageIndex = pageIndexs + 1;

      console.log("页面上拉翻页测试!最后一页了 这是第" + (pageIndexs + 1) + "页");
    }

    that.setData({ loadmore: PageEndloadmore });

    //动态设置当前页面的标题。
    wx.setNavigationBarTitle({
      title: '当前' + ShowPageIndex + "页的标题"
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,