'use strict';

function formatTime(time) {
  if (typeof time !== 'number' || time < 0) {
    return time;
  }

  var hour = parseInt(time / 3600);
  time = time % 3600;
  var minute = parseInt(time / 60);
  time = time % 60;
  var second = time;

  return [hour, minute, second].map(function (n) {
    n = n.toString();
    return n[1] ? n : '0' + n;
  }).join(':');
}

function formatLocation(longitude, latitude) {
  if (typeof longitude === 'string' && typeof latitude === 'string') {
    longitude = parseFloat(longitude);
    latitude = parseFloat(latitude);
  }

  longitude = longitude.toFixed(2);
  latitude = latitude.toFixed(2);

  return {
    longitude: longitude.toString().split('.'),
    latitude: latitude.toString().split('.')
  };
}

// 判断是否是iOS系统平台
/**
 * 判断是否是苹果系统，是返回true
 * app 通过var app = getApp();获得
 */
function isIos(app) {

  console.log(app.globalData.SystemInfo);

  var platform = app.globalData.SystemInfo.platform;
  platform = platform.toLowerCase();
  //console.log("isIos", platform);
  return platform.indexOf("ios") >= 0;
}

/**
 * 解决苹果端startPullDownRefresh不能触发onPullDownRefresh的问题
 * that  js文件的this
 * app
 */
function cusStartPullDownRefreh(that, app) {
  wx.startPullDownRefresh({});
  if (isIos(app)) {
    that.onPullDownRefresh();
  }
}

function SystemInfo() {

  wx.getSystemInfo({

    success: function success(res) {

      var reswindowWidth = res.windowWidth;
      var reswindowHeight = res.windowHeight; // 获取可使用窗口高度
      var windowHeight = res.windowHeight * (750 / reswindowWidth); //将高度乘以换算后的该设备的rpx与px的比例

      console.log(windowHeight); //最后获得转化后得rpx单位的窗口高度
      console.log(reswindowWidth);
      console.log(reswindowHeight);
    }

  });
}

module.exports = {

  formatTime: formatTime,
  formatLocation: formatLocation,
  StartPullDownRefreh: cusStartPullDownRefreh,
  SystemInfo: SystemInfo,
  isIos: isIos

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOlsiZm9ybWF0VGltZSIsInRpbWUiLCJob3VyIiwicGFyc2VJbnQiLCJtaW51dGUiLCJzZWNvbmQiLCJtYXAiLCJuIiwidG9TdHJpbmciLCJqb2luIiwiZm9ybWF0TG9jYXRpb24iLCJsb25naXR1ZGUiLCJsYXRpdHVkZSIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwic3BsaXQiLCJpc0lvcyIsImFwcCIsImNvbnNvbGUiLCJsb2ciLCJnbG9iYWxEYXRhIiwiU3lzdGVtSW5mbyIsInBsYXRmb3JtIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiY3VzU3RhcnRQdWxsRG93blJlZnJlaCIsInRoYXQiLCJ3eCIsInN0YXJ0UHVsbERvd25SZWZyZXNoIiwib25QdWxsRG93blJlZnJlc2giLCJnZXRTeXN0ZW1JbmZvIiwic3VjY2VzcyIsInJlcyIsInJlc3dpbmRvd1dpZHRoIiwid2luZG93V2lkdGgiLCJyZXN3aW5kb3dIZWlnaHQiLCJ3aW5kb3dIZWlnaHQiLCJtb2R1bGUiLCJleHBvcnRzIiwiU3RhcnRQdWxsRG93blJlZnJlaCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxVQUFULENBQW9CQyxJQUFwQixFQUEwQjtBQUN4QixNQUFJLE9BQU9BLElBQVAsS0FBZ0IsUUFBaEIsSUFBNEJBLE9BQU8sQ0FBdkMsRUFBMEM7QUFDeEMsV0FBT0EsSUFBUDtBQUNEOztBQUVELE1BQUlDLE9BQU9DLFNBQVNGLE9BQU8sSUFBaEIsQ0FBWDtBQUNBQSxTQUFPQSxPQUFPLElBQWQ7QUFDQSxNQUFJRyxTQUFTRCxTQUFTRixPQUFPLEVBQWhCLENBQWI7QUFDQUEsU0FBT0EsT0FBTyxFQUFkO0FBQ0EsTUFBSUksU0FBU0osSUFBYjs7QUFFQSxTQUFRLENBQUNDLElBQUQsRUFBT0UsTUFBUCxFQUFlQyxNQUFmLENBQUQsQ0FBeUJDLEdBQXpCLENBQTZCLFVBQVVDLENBQVYsRUFBYTtBQUMvQ0EsUUFBSUEsRUFBRUMsUUFBRixFQUFKO0FBQ0EsV0FBT0QsRUFBRSxDQUFGLElBQU9BLENBQVAsR0FBVyxNQUFNQSxDQUF4QjtBQUNELEdBSE0sRUFHSkUsSUFISSxDQUdDLEdBSEQsQ0FBUDtBQUlEOztBQUVELFNBQVNDLGNBQVQsQ0FBd0JDLFNBQXhCLEVBQW1DQyxRQUFuQyxFQUE2QztBQUMzQyxNQUFJLE9BQU9ELFNBQVAsS0FBcUIsUUFBckIsSUFBaUMsT0FBT0MsUUFBUCxLQUFvQixRQUF6RCxFQUFtRTtBQUNqRUQsZ0JBQVlFLFdBQVdGLFNBQVgsQ0FBWjtBQUNBQyxlQUFXQyxXQUFXRCxRQUFYLENBQVg7QUFDRDs7QUFFREQsY0FBWUEsVUFBVUcsT0FBVixDQUFrQixDQUFsQixDQUFaO0FBQ0FGLGFBQVdBLFNBQVNFLE9BQVQsQ0FBaUIsQ0FBakIsQ0FBWDs7QUFFQSxTQUFPO0FBQ0xILGVBQVdBLFVBQVVILFFBQVYsR0FBcUJPLEtBQXJCLENBQTJCLEdBQTNCLENBRE47QUFFTEgsY0FBVUEsU0FBU0osUUFBVCxHQUFvQk8sS0FBcEIsQ0FBMEIsR0FBMUI7QUFGTCxHQUFQO0FBSUQ7O0FBRUQ7QUFDQTs7OztBQUlBLFNBQVNDLEtBQVQsQ0FBZUMsR0FBZixFQUFtQjs7QUFFakJDLFVBQVFDLEdBQVIsQ0FBWUYsSUFBSUcsVUFBSixDQUFlQyxVQUEzQjs7QUFFQSxNQUFJQyxXQUFXTCxJQUFJRyxVQUFKLENBQWVDLFVBQWYsQ0FBMEJDLFFBQXpDO0FBQ0FBLGFBQVdBLFNBQVNDLFdBQVQsRUFBWDtBQUNBO0FBQ0EsU0FBT0QsU0FBU0UsT0FBVCxDQUFpQixLQUFqQixLQUF5QixDQUFoQztBQUVEOztBQUdEOzs7OztBQUtBLFNBQVNDLHNCQUFULENBQWdDQyxJQUFoQyxFQUFxQ1QsR0FBckMsRUFBeUM7QUFDdkNVLEtBQUdDLG9CQUFILENBQXdCLEVBQXhCO0FBQ0EsTUFBSVosTUFBTUMsR0FBTixDQUFKLEVBQWU7QUFDYlMsU0FBS0csaUJBQUw7QUFDRDtBQUNGOztBQUVELFNBQVVSLFVBQVYsR0FBc0I7O0FBRXRCTSxLQUFHRyxhQUFILENBQWlCOztBQUVmQyxhQUFRLGlCQUFVQyxHQUFWLEVBQWU7O0FBRXJCLFVBQUlDLGlCQUFlRCxJQUFJRSxXQUF2QjtBQUNBLFVBQUlDLGtCQUFnQkgsSUFBSUksWUFBeEIsQ0FIcUIsQ0FHNkM7QUFDbEUsVUFBSUEsZUFBZ0JKLElBQUlJLFlBQUosSUFBb0IsTUFBTUgsY0FBMUIsQ0FBcEIsQ0FKcUIsQ0FJNkM7O0FBRWxFZixjQUFRQyxHQUFSLENBQVlpQixZQUFaLEVBTnFCLENBTTZDO0FBQ2xFbEIsY0FBUUMsR0FBUixDQUFZYyxjQUFaO0FBQ0FmLGNBQVFDLEdBQVIsQ0FBWWdCLGVBQVo7QUFFRDs7QUFaYyxHQUFqQjtBQWdCQzs7QUFFREUsT0FBT0MsT0FBUCxHQUFpQjs7QUFFZnRDLGNBQVlBLFVBRkc7QUFHZlUsa0JBQWdCQSxjQUhEO0FBSWY2Qix1QkFBb0JkLHNCQUpMO0FBS2ZKLGNBQVdBLFVBTEk7QUFNZkwsU0FBT0E7O0FBTlEsQ0FBakIiLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGZvcm1hdFRpbWUodGltZSkge1xuICBpZiAodHlwZW9mIHRpbWUgIT09ICdudW1iZXInIHx8IHRpbWUgPCAwKSB7XG4gICAgcmV0dXJuIHRpbWVcbiAgfVxuXG4gIHZhciBob3VyID0gcGFyc2VJbnQodGltZSAvIDM2MDApO1xuICB0aW1lID0gdGltZSAlIDM2MDA7XG4gIHZhciBtaW51dGUgPSBwYXJzZUludCh0aW1lIC8gNjApO1xuICB0aW1lID0gdGltZSAlIDYwO1xuICB2YXIgc2Vjb25kID0gdGltZTtcblxuICByZXR1cm4gKFtob3VyLCBtaW51dGUsIHNlY29uZF0pLm1hcChmdW5jdGlvbiAobikge1xuICAgIG4gPSBuLnRvU3RyaW5nKClcbiAgICByZXR1cm4gblsxXSA/IG4gOiAnMCcgKyBuXG4gIH0pLmpvaW4oJzonKVxufVxuXG5mdW5jdGlvbiBmb3JtYXRMb2NhdGlvbihsb25naXR1ZGUsIGxhdGl0dWRlKSB7XG4gIGlmICh0eXBlb2YgbG9uZ2l0dWRlID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgbGF0aXR1ZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgbG9uZ2l0dWRlID0gcGFyc2VGbG9hdChsb25naXR1ZGUpO1xuICAgIGxhdGl0dWRlID0gcGFyc2VGbG9hdChsYXRpdHVkZSlcbiAgfVxuXG4gIGxvbmdpdHVkZSA9IGxvbmdpdHVkZS50b0ZpeGVkKDIpO1xuICBsYXRpdHVkZSA9IGxhdGl0dWRlLnRvRml4ZWQoMik7XG5cbiAgcmV0dXJuIHtcbiAgICBsb25naXR1ZGU6IGxvbmdpdHVkZS50b1N0cmluZygpLnNwbGl0KCcuJyksXG4gICAgbGF0aXR1ZGU6IGxhdGl0dWRlLnRvU3RyaW5nKCkuc3BsaXQoJy4nKVxuICB9XG59XG5cbi8vIOWIpOaWreaYr+WQpuaYr2lPU+ezu+e7n+W5s+WPsFxuLyoqXG4gKiDliKTmlq3mmK/lkKbmmK/oi7nmnpzns7vnu5/vvIzmmK/ov5Tlm550cnVlXG4gKiBhcHAg6YCa6L+HdmFyIGFwcCA9IGdldEFwcCgpO+iOt+W+l1xuICovXG5mdW5jdGlvbiBpc0lvcyhhcHApe1xuXG4gIGNvbnNvbGUubG9nKGFwcC5nbG9iYWxEYXRhLlN5c3RlbUluZm8pO1xuXG4gIGxldCBwbGF0Zm9ybSA9IGFwcC5nbG9iYWxEYXRhLlN5c3RlbUluZm8ucGxhdGZvcm07XG4gIHBsYXRmb3JtID0gcGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbiAgLy9jb25zb2xlLmxvZyhcImlzSW9zXCIsIHBsYXRmb3JtKTtcbiAgcmV0dXJuIHBsYXRmb3JtLmluZGV4T2YoXCJpb3NcIik+PTA7XG5cbn1cblxuXG4vKipcbiAqIOino+WGs+iLueaenOerr3N0YXJ0UHVsbERvd25SZWZyZXNo5LiN6IO96Kem5Y+Rb25QdWxsRG93blJlZnJlc2jnmoTpl67pophcbiAqIHRoYXQgIGpz5paH5Lu255qEdGhpc1xuICogYXBwXG4gKi9cbmZ1bmN0aW9uIGN1c1N0YXJ0UHVsbERvd25SZWZyZWgodGhhdCxhcHApe1xuICB3eC5zdGFydFB1bGxEb3duUmVmcmVzaCh7fSk7XG4gIGlmIChpc0lvcyhhcHApKXtcbiAgICB0aGF0Lm9uUHVsbERvd25SZWZyZXNoKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gIFN5c3RlbUluZm8oKXtcblxud3guZ2V0U3lzdGVtSW5mbyh7XG5cbiAgc3VjY2VzczpmdW5jdGlvbiAocmVzKSB7XG5cbiAgICBsZXQgcmVzd2luZG93V2lkdGg9cmVzLndpbmRvd1dpZHRoO1xuICAgIGxldCByZXN3aW5kb3dIZWlnaHQ9cmVzLndpbmRvd0hlaWdodDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiOt+WPluWPr+S9v+eUqOeql+WPo+mrmOW6plxuICAgIGxldCB3aW5kb3dIZWlnaHQgPSAocmVzLndpbmRvd0hlaWdodCAqICg3NTAgLyByZXN3aW5kb3dXaWR0aCkpOyAgIC8v5bCG6auY5bqm5LmY5Lul5o2i566X5ZCO55qE6K+l6K6+5aSH55qEcnB45LiOcHjnmoTmr5TkvotcblxuICAgIGNvbnNvbGUubG9nKHdpbmRvd0hlaWdodCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5pyA5ZCO6I635b6X6L2s5YyW5ZCO5b6XcnB45Y2V5L2N55qE56qX5Y+j6auY5bqmXG4gICAgY29uc29sZS5sb2cocmVzd2luZG93V2lkdGgpO1xuICAgIGNvbnNvbGUubG9nKHJlc3dpbmRvd0hlaWdodCk7XG5cbiAgfVxuXG59KVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIGZvcm1hdFRpbWU6IGZvcm1hdFRpbWUsXG4gIGZvcm1hdExvY2F0aW9uOiBmb3JtYXRMb2NhdGlvbixcbiAgU3RhcnRQdWxsRG93blJlZnJlaDpjdXNTdGFydFB1bGxEb3duUmVmcmVoLFxuICBTeXN0ZW1JbmZvOlN5c3RlbUluZm8sXG4gIGlzSW9zIDppc0lvc1xuXG59OyJdfQ==